name: Publish NuGet Package

on: [push, pull_request]
jobs:
  version-bump:
    name: Bump test
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        run: |
          echo "BRANCH_NAME=${GITHUB_HEAD_REF:-$(echo ${GITHUB_REF#refs/heads/})}"
          echo "BRANCH_NAME=${GITHUB_HEAD_REF:-$(echo ${GITHUB_REF#refs/heads/})}" >> $GITHUB_ENV

      # Detect version bump type
      - id: get_bump
        run: |
          BUMP="patch"
          echo "Initial BUMP=$BUMP"
          if [[ "${BRANCH_NAME}" =~ ^feature/ ]]; then
            BUMP="minor"
            echo "Branch is feature/, setting BUMP=minor"
          fi

          # Check commit message for MAJOR/BREAKING
          MERGE_COMMIT=$(git log -1 --pretty=%B)
          echo "Merge commit message:"
          echo "$MERGE_COMMIT"
          
          if echo "$MERGE_COMMIT" | grep -qiE "(MAJOR|BREAKING CHANGE)"; then
            BUMP="major"
            echo "Found MAJOR or BREAKING CHANGE in commit message, setting BUMP=major"
          fi

          # Check PR labels for "Major"
          LABELS="${{ toJson(github.event.pull_request.labels) }}"
          if echo "$LABELS" | grep -qi major; then
            BUMP="major"
            echo "PR labeled major, setting BUMP=major"
          fi

          echo "Final BUMP=$BUMP"
          echo "BUMP=$BUMP" >> $GITHUB_ENV

      # Bump version using community action (choose one)
      - name: Bump version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR|BREAKING CHANGE)"
          minor_pattern: "^feature/"

      # Optional: Create a new Release
      - name: Create Release
        if: ${{ steps.semantic-version.outputs.new_tag != '' }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.semantic-version.outputs.new_tag }}
          release_name: Release ${{ steps.semantic-version.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

  nuget_publish:
    name: Build, Pack, and Publish NuGet Package
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      BUILD_CONFIG: "Release"
      PROJECT_PATH: "DotnetViewComponents/DotnetViewComponents.csproj"
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'   # Specify your target .NET version

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: '6.3.0'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1

      - name: Display versioning outputs
        run: |
          echo "NuGet Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "Outputs: ${{ toJson(steps.gitversion.outputs) }}"

      - name: Use version in another step
        run: |
          VERSION="${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.patch }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Restore NuGet packages
        run: dotnet restore $PROJECT_PATH

      - name: Build project
        run: dotnet build $PROJECT_PATH --configuration $BUILD_CONFIG --no-restore

      - name: Pack NuGet package
        run: dotnet pack $PROJECT_PATH --configuration $BUILD_CONFIG --no-build -o out /p:PackageVersion=$VERSION

      - name: Add GitHub NuGet source
        run: dotnet nuget add source --username ${{ github.actor }} --password $GITHUB_TOKEN --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish NuGet package to GitHub Packages
        run: dotnet nuget push out/*.nupkg --api-key $GITHUB_TOKEN --source "github" --skip-duplicate
